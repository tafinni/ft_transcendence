version: '3.5'

services:
  db:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres_data_new:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5  
    ports:
      - "5432:5432"
    networks:
       - t_intra


  backend:
    image: backend
    container_name: backend
    build: ./backend
    depends_on:
      db:
        condition: service_healthy
    networks:
      - t_intra
      - t_extra
    expose:
      - "8000"
    volumes:
      - ./backend:/backend
      - ./media:/app/media 
    environment:
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}

  frontend:
    image: frontend
    container_name: frontend
    build:
      context: ./frontend 
      dockerfile: Dockerfile
 #   pull_policy: build
    networks:
      - t_extra
    volumes:
     - ./frontend/src:/app/src
    ports:
      - "3000:3000"
    environment:
      VITE_BACKEND_URL: ${VITE_BACKEND_URL}

  nginx:
    image: nginx_image
    container_name: nginx
    build:
      context: ./nginx
      dockerfile: Dockerfile
    depends_on:
      - frontend
    networks:
      - t_extra
    volumes:
      - ./frontend/src/dist:/usr/share/nginx/html
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "8080:8080"
      - "1443:1443"

networks:
  t_intra:
#    name: t_intra
  t_extra:
#    name: t_extra

volumes:
#  postgres_data:
  postgres_data_new: